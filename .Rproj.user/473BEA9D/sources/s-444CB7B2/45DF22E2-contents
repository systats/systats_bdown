## app.R ##
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(shiny.semantic)
library(shinythemes)
library(highcharter)
library(maptools)
library(dplyr)
library(rgdal)
#library(treemap)
library(shinyjqui)
library(stringr)
library(viridis)
library(streamgraph)
library(sunburstR)

# devtools::install_github("hrbrmstr/streamgraph")

# http://www.rcharlie.com/post/coachellar/
# https://rpubs.com/jbkunst/highcharter-hchart-data-frames
# https://bookdown.org/lyzhang10/my_r_tips_book2/how-to-plot-data.html
# https://rstudio-pubs-static.s3.amazonaws.com/230219_df522a7bece545df94fcc384c1ea5023.html

load('data/project_macro.Rdata')

project_macro <- project_macro %>%
  dplyr::mutate(region_num = 
                      case_when(
                        grepl("East Asia & Pacific", region) ~ "1",
                        grepl("Europe & Central Asia",region) ~ "2",
                        grepl("Latin America & Caribbean",region) ~ "3",
                        grepl("Middle East & North Africa",region) ~ "4",
                        grepl("North America",region) ~ "5",
                        grepl("South Asia",region) ~ "6",
                        grepl("Sub-Saharan Africa",region) ~ "7"
                      )) %>%
  mutate(region_num = as.numeric(region_num)) %>%
  mutate(region_label = case_when(
    region_num == 1 ~ "EAP",
    region_num == 2 ~ "ECA",
    region_num == 3 ~ "LAC",
    region_num == 4 ~ "MENA",
    region_num == 5 ~ "NA",
    region_num == 6 ~ "SA",
    region_num == 7 ~ "SS"
    
  ))

# download.file(file.path('http://www.naturalearthdata.com/http/',
#                         'www.naturalearthdata.com/download/50m/cultural',
#                         'ne_50m_admin_0_countries.zip'),
#               f <- tempfile())
# unzip(f, exdir=tempdir())
# countries2 <- readOGR(tempdir(), 'ne_50m_admin_0_countries', encoding='UTF-8')

# save(countries2, file = "data/countries2")

load("data/countries2")
#countries2@data <- countries2@data %>% as.data.frame()
#class(countries2@data)

quantile_labels <- function(vec, n) {
  qs <- round(quantile(vec, seq(0, 1, 1/n), na.rm = TRUE), 1)
  len <- length(qs) - 1
  qlabs <- c()
  for (i in 1:len) {
    j <- i + 1
    v <- paste0(as.character(qs[i]), "-", as.character(qs[j]))
    qlabs <- c(qlabs, v)
  }
  final_labs <- c(qlabs, "Data unavailable")
  final_labs
}

ui <- shinyUI(
  fluidPage(
    title = 'Exploratory Data Analysis',
    theme = shinythemes::shinytheme("yeti"), # sandstone, united, paper, flatly, cosmo
    semanticPage(
    #shinythemes::themeSelector(),
    div(class = "ui grid", 
        div(class = "four wide column", 
            pickerInput(
              inputId = "var",
              label = "Live search",
              choices = colnames(project_macro)[4:length(project_macro)],
              options = list(`live-search` = TRUE)
            ),
            pickerInput(
              inputId = "cntry",
              label = "Multiple",
              choices = sort(unique(project_macro$country)),
              multiple = TRUE, selected = c("France", "China", "Germany")
            ),
            selectInput(
              inputId = "yr",
              label = "Multiple",
              choices = sort(unique(project_macro$year)),
              multiple = F, selected = 2000)
        ), 
        div(class = "six wide column", 
            highcharter::highchartOutput("plot")
        ),
        div(class = "six wide column",
            sunburstOutput("sunburst")
        )
        # div(class = "three wide column",
        #     highcharter::highchartOutput("piechart1", height = "200px"),
        #     highcharter::highchartOutput("piechart2", height = "200px")
        # )
      ),
      div(class = "ui grid", 
        div(class = "four wide column", ""
        ),
        div(class = "six wide column", 
            highcharter::highchartOutput("highmap")
                #highcharter::highchartOutput("propplot")
        ),
        div(class = "six wide column",
            streamgraph::streamgraphOutput("steamgraph")
        )
      ),
    br(),
    br()
    )
  )
)

server <- function(input, output, session) {
  
  # jqui_resizable("#plot")
  # jqui_resizable("#highmap")
  # jqui_resizable("#barplot")
  # jqui_draggable("#plot")
  # jqui_draggable("#highmap")
  # jqui_draggable("#barplot")
  
  output$plot <- highcharter::renderHighchart({
    gg1 <- project_macro %>%
      filter(country %in% input$cntry) %>% # c("BR", "SA", "DE", "CN", "US")
      arrange(country, year)
    
    gg1$y <- gg1[[input$var]]
  
    hchart(gg1, "line", hcaes(x = year, y = y, group =  country)) %>%
      hc_add_theme(hc_theme_elementary()) %>%
      hc_xAxis(title = 
               list(text = "Year"),
               opposite = TRUE
               # plotLines = list(
               #   list(label = list(text = "Querschnittsdaten"),
               #        color = "black",
               #        width = 3,
               #        value = as.numeric(input$yr))
               # )
      )
      #hc_title(text = paste0("Time Series of ", input$var, " for Selected Countries"))
  }) 
  
  # output$worldmap <- leaflet::renderLeaflet({
  # 
  # 
  #   nn <- project_macro %>%
  #     filter(year == input$yr) %>%
  #     right_join(countries2@data, by = c("iso2c"="iso_a2"))
  # 
  #   nn$y <- nn[[input$var]]
  #   countries2@data <- nn
  #   pal <- colorQuantile("YlGnBu", NULL, n = 6)
  # 
  #   # Get some nice legend labels
  #   labs <- quantile_labels(countries2$y, 6)
  #   popup <- paste0("<strong>", countries2$country, "</strong><br>",
  #                   "<strong>Gini index: </strong>")
  # 
  #   mb_tiles <- "http://a.tiles.mapbox.com/v3/kwalkertcu.l1fc0hab/{z}/{x}/{y}.png"
  # 
  #   mb_attribution <- 'Mapbox <a href="http://mapbox.com/about/maps" target="_blank">Terms &amp; Feedback</a>'
  # 
  #   gini_map <- leaflet(data = countries2) %>%
  #     addTiles(urlTemplate = mb_tiles,
  #              attribution = mb_attribution) %>%
  #     setView(0, 0, zoom = 1) %>%
  #     addPolygons(fillColor = ~pal(y),
  #                 fillOpacity = 0.8,
  #                 color = "#BDBDC3",
  #                 weight = 1,
  #                 popup = popup) %>%
  #     addLegend(colors = c(RColorBrewer::brewer.pal(6, "YlGnBu"), "#808080"),
  #               bins = 6,
  #               position = 'bottomright',
  #               title = "new",
  #               labels = labs)
  # 
  #   return(gini_map)
  # })

  output$highmap <- renderHighchart({
    gg1 <- project_macro %>%
      filter(year == input$yr) %>%
      right_join(countries2@data, by = c("iso2c"="iso_a2"))
    
    colnames(gg1)[which(colnames(gg1)==input$var)]="value"
    
    gg1 <- gg1 %>%
      dplyr::select(iso2c, value) %>%
      rename(code = iso2c)

    colors <- viridis::viridis(10, option = "D", direction = -1)
    
    nn <- hcmap(data = gg1, value = "value",
          joinBy = c("hc-a2", "code"), 
          #name = input$var,
          #dataLabels = list(enabled = TRUE, format = "{point.name}"),
          borderColor = "#FAFAFA", 
          borderWidth = 0.1
          #color = hex_to_rgba("#000000", 0.75)
          #tooltip = list(valueDecimals = 2, valuePrefix = "$", valueSuffix = "USD")
          ) %>%
          hc_colorAxis(minColor = "#0D0887FF", maxColor = "#F0F921FF", 
                   stops = color_stops(n=length(colors), colors = colors)) %>%
          hc_add_theme(hc_theme_null()) %>%
          hc_mapNavigation(enabled = TRUE)
      #hc_title(text = paste0("Global Distribution of ", input$var, " (",input$yr, ")")) %>%
      #hc_colorAxis(minColor = "blue", maxColor = "red")

    return(nn)
  })

  # output$propplot <- highcharter::renderHighchart({
  #   gg1 <- project_macro %>%
  #     filter(year %in% input$yr) %>% #
  #     arrange(country, year) 
  # 
  #   gg1$value <- gg1[[input$var]]
  #   
  #   library(treemap)
  #   treemap(gg1, index = c("regions", "iso2c"),
  #                 vSize = "value", vColor = "regions",
  #                 type = "value", palette = c("#EB0909", "#4D41D9",  "#C4E00D", "#B336C9", 
  #                                             "#238F14", "#E0C216", "#2135CC", "#2CDED8", 
  #                                             "#EB5F0E", "#FF0000")) %>%
  #     hctreemap(allowDrillToNode = TRUE) %>% 
  #     #hc_title(text = "Gross National Income World Data") %>% 
  #     hc_tooltip(pointFormat = "<b>{point.name}</b>:<br>
  #                            Region: {point.valuecolor:,.0f}<br>
  #                            Value: {point.value:,.0f}") %>% 
  #     hc_exporting(enabled = F)
  #   # ds <- list_parse(df)
  #   # highchart() %>%
  #   #   hc_title(text = "A simple Treemap") %>%
  #   #   hc_add_series(data = ds, type = "treemap", colorByPoint = TRUE, group = "region")
  # })
  # 
  # 
  # output$barplot <- highcharter::renderHighchart({
  #   gg1 <- project_macro %>%
  #     filter(year %in% 2000) %>% #
  #     arrange(country, year)  %>%
  #     mutate(region_jitter = region_num + runif(n(),-.5, .5))
  #   
  #   colnames(gg1)[which(colnames(gg1)==input$var)]="value"
  #   gg1$value <- round(gg1$value, 2)
  # 
  # highchart() %>% 
  #     hc_title(text = "") %>% 
  #     hc_add_series(gg1, "point", hcaes(x = value, y = region_jitter, #z = gg1$country,
  #                                                 color = region_num, label = country),
  #                           dataLabels = list(
  #                             enabled = TRUE,
  #                             format = "{point.label}"
  #                           )) %>%
  #     
  #     #hc_yAxis(categories = gg1$regions) %>% 
  #     #hc_chart(zoomType = "xy") %>% 
  #     hc_tooltip(useHTML = TRUE,
  #                headerFormat = "<table>",
  #                pointFormat = paste("<tr><th colspan=\"1\"><b>{point.label}</b></th></tr>",
  #                                    "<tr><th>", input$var,"</th><td>{point.x}",
  #                                    "<tr><th>Region</th><td>{point.y}</td></tr>"
  #                                    #"<tr><th>Drat</th><td>{point.z} </td></tr>",
  #                                    #"<tr><th>Region Label</th><td>{point.value} </td></tr>"
  #                                    ),
  #                footerFormat = "</table>")  %>%
  #   hc_title(text = paste0(input$var, " per Country by Region (",input$yr, ")"))
  #   
  #   
  # })
  # 
  
  # output$piechart1 <- highcharter::renderHighchart({
  #   gg1 <- project_macro %>%
  #     filter(year %in% input$yr) %>% #
  #     arrange(country, year) 
  #     
  #   colnames(gg1)[which(colnames(gg1)==input$var)]="value"
  #   
  #   gg2 <- gg1 %>% 
  #     select(region, value) %>%
  #     mutate(region = stringr::str_replace_all(region, "\\(.*?\\)", "")) %>%
  #     filter(!is.na(region)) %>%
  #     group_by(region) %>% 
  #     summarise(count = round(sum(value, na.rm = T))) %>% arrange(desc(count))
  #   
  #   gg2 %>%
  #     hchart("pie", innerSize= '40%', showInLegend= F,
  #            hcaes(x = region, y = count, color = -count)) %>%
  #     hc_add_theme(hc_theme_null()) %>% 
  #     hc_title(text = paste0("Sum of ",input$var, " by Region (", input$yr, ")"))
  #     #hc_credits(enabled = TRUE, text = "Sources: Occupational Safety and Health Administration aka OSHA", 
  #     #           style = list(fontSize = "10px"))
  #   
  #   
  # })
  # 
  # output$piechart2 <- highcharter::renderHighchart({
  #   gg1 <- project_macro %>%
  #     filter(year %in% input$yr) %>% #
  #     arrange(country, year) 
  #   
  #   colnames(gg1)[which(colnames(gg1)==input$var)]="value"
  #   
  #   gg2 <- gg1 %>% 
  #     select(country, region, region_num, value) %>%
  #     mutate(region = stringr::str_replace_all(region, "\\(.*?\\)", "")) %>%
  #     filter(!is.na(region)) %>%
  #     arrange(region, desc(value)) %>%
  #     top_n(n = 30)
  #   
  #   gg2 %>%
  #     hchart("pie", innerSize= '40%', showInLegend= F,
  #            hcaes(x = country, y = value, color = -region_num)) %>%
  #     hc_add_theme(hc_theme_null()) %>% 
  #     hc_title(text = paste0("Sum of ",input$var, " by Country and Region (",input$yr, ")"))
  #   #hc_credits(enabled = TRUE, text = "Sources: Occupational Safety and Health Administration aka OSHA", 
  #   #           style = list(fontSize = "10px"))
  #   
  #   
  # })

  output$sunburst <- renderSunburst({
    gg1 <- project_macro %>%
      filter(year %in% input$yr) %>% #
      arrange(country, year) 
    
    colnames(gg1)[which(colnames(gg1)==input$var)]="value"
    
    gg2 <- gg1 %>% 
      select(region, country, value) %>%
      mutate(region = stringr::str_replace_all(region, "\\(.*?\\)", "")) %>%
      mutate(region = stringr::str_replace_all(region, "-", " ")) %>%
      filter(!is.na(region))

    gg2 %>% 
      mutate(seqs = paste(region, country,sep="-")) %>% 
      select(seqs, value) %>% 
      sunburst(count = TRUE)
    
  })
  
  
  output$steamgraph <- streamgraph::renderStreamgraph({
    gg3 <- project_macro %>%
      #filter(year %in% 2000) %>% #
      #arrange(country, year) %>%
      mutate(region = stringr::str_replace_all(region, "\\(.*?\\)", "")) 
    
    colnames(gg3)[which(colnames(gg3)==input$var)]="value"
    
    gg3 %>%
      select(year, region, value) %>%
      group_by(region, year) %>%
      summarise(value = sum(value, na.rm = T)) %>%
      ungroup %>%
      #mutate(region = stringr::str_replace_all(region, "\\(.*?\\)", "")) %>%
      filter(!is.na(region)) %>%
      mutate(region = as.factor(region)) %>%
      arrange(region, year) %>%
      mutate(year = lubridate::year(lubridate::years(year))) %>%
      streamgraph(key = "region", value = "value", date = "year", interpolate="cardinal")# %>%
      #sg_axis_x(1, "year", "%Y") %>%
      #sg_fill_brewer("PuOr")
    
  })
}

shinyApp(ui, server)